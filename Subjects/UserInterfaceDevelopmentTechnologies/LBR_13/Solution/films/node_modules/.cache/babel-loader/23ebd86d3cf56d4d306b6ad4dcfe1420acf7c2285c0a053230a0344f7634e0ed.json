{"ast":null,"code":"var _jsxFileName = \"/home/renat/university/trpi/labs/13/films/src/Search/Search.tsx\",\n  _s = $RefreshSig$();\nimport { Cards } from \"../Cards/Cards\";\nimport \"./Search.css\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Category = /*#__PURE__*/function (Category) {\n  Category[Category[\"all\"] = 0] = \"all\";\n  Category[Category[\"movies\"] = 1] = \"movies\";\n  Category[Category[\"series\"] = 2] = \"series\";\n  return Category;\n}(Category || {});\nasync function search_for(input, cat) {\n  try {\n    const response = await axios.get(\"https://www.omdbapi.com/\", {\n      params: {\n        apikey: \"your_api_key_here\",\n        // Замените на свой собственный ключ API OMDb\n        s: input,\n        type: Category[cat]\n      }\n    });\n    if (response.data.Response === \"True\") {\n      const cards = response.data.Search.map(item => ({\n        title: item.Title,\n        year: parseInt(item.Year),\n        type: cat,\n        image: item.Poster,\n        url: `https://www.imdb.com/title/${item.imdbID}/`\n      }));\n      return cards;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\nexport function Search() {\n  _s();\n  let [cards, setCards] = React.useState([]);\n  let [category, setCategory] = React.useState(Category.all);\n  let [input, setInput] = React.useState(\"\");\n  console.log(input);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Search\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"Search-input\",\n      placeholder: \"search\",\n      onChange: v => setInput(v.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Search-props\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"searchType\",\n          onChange: () => setCategory(Category.all)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), \" \", \"All\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"searchType\",\n          onChange: () => setCategory(Category.movies)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), \" \", \"Movies only\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"searchType\",\n          onChange: () => setCategory(Category.series)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), \" \", \"Series only\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Search-button\",\n        onClick: () => cards = search_for(input, category),\n        children: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cards: cards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"9New+QTjgSs7xmqtqulzi0vbCso=\");\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["Cards","React","axios","jsxDEV","_jsxDEV","Category","search_for","input","cat","response","get","params","apikey","s","type","data","Response","cards","Search","map","item","title","Title","year","parseInt","Year","image","Poster","url","imdbID","error","console","_s","setCards","useState","category","setCategory","all","setInput","log","className","children","placeholder","onChange","v","target","value","fileName","_jsxFileName","lineNumber","columnNumber","name","movies","series","onClick","_c","$RefreshReg$"],"sources":["/home/renat/university/trpi/labs/13/films/src/Search/Search.tsx"],"sourcesContent":["import { Card } from \"../Card\";\nimport { Cards } from \"../Cards/Cards\";\nimport \"./Search.css\";\nimport React from \"react\";\nimport axios from \"axios\";\n\nenum Category {\n  all,\n  movies,\n  series,\n}\n\nasync function search_for(input: string, cat: Category): Promise<Card[]> {\n  try {\n    const response = await axios.get(\"https://www.omdbapi.com/\", {\n      params: {\n        apikey: \"your_api_key_here\", // Замените на свой собственный ключ API OMDb\n        s: input,\n        type: Category[cat],\n      },\n    });\n\n    if (response.data.Response === \"True\") {\n      const cards: Card[] = response.data.Search.map((item: any) => ({\n        title: item.Title,\n        year: parseInt(item.Year),\n        type: cat,\n        image: item.Poster,\n        url: `https://www.imdb.com/title/${item.imdbID}/`,\n      }));\n\n      return cards;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n\nexport function Search() {\n  let [cards, setCards] = React.useState([] as Card[]);\n  let [category, setCategory] = React.useState(Category.all);\n  let [input, setInput] = React.useState(\"\");\n\n  console.log(input);\n\n  return (\n    <div className=\"Search\">\n      <input\n        className=\"Search-input\"\n        placeholder=\"search\"\n        onChange={(v) => setInput(v.target.value)}\n      />\n      <div className=\"Search-props\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"searchType\"\n            onChange={() => setCategory(Category.all)}\n          />{\" \"}\n          All\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"searchType\"\n            onChange={() => setCategory(Category.movies)}\n          />{\" \"}\n          Movies only\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"searchType\"\n            onChange={() => setCategory(Category.series)}\n          />{\" \"}\n          Series only\n        </label>\n\n        <button\n          className=\"Search-button\"\n          onClick={() => (cards = search_for(input, category))}\n        >\n          search\n        </button>\n      </div>\n      <Cards cards={cards} />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}